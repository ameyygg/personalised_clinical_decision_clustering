# -*- coding: utf-8 -*-
"""personalised_clinical_decision_clusturing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v-Ue8RH5nIcVSNs_Q4EvYLBcPzo3X3fQ
"""

# Step 1: Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os

# For clustering and scaling
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA

# Optional: For hierarchical clustering
from scipy.cluster.hierarchy import dendrogram, linkage

import kagglehub

# Download latest version
path = kagglehub.dataset_download("fatemehmohammadinia/heart-attack-dataset-tarik-a-rashid")

print("Path to dataset files:", path)

os.listdir(path)

df = pd.read_csv(os.path.join(path, "Medicaldataset.csv"))
df.head()

# Optional: Rename columns to remove spaces and unify format
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')

# Map Result column to numeric for later analysis (positive = 1, negative = 0)
df['result'] = df['result'].map({'positive': 1, 'negative': 0})

# Check for missing values
print("Missing values per column:\n", df.isnull().sum())

# Drop rows with missing values (if any)
df.dropna(inplace=True)

# Define features to use for clustering (exclude 'result' column)
features = ['age', 'gender', 'heart_rate', 'systolic_blood_pressure',
            'diastolic_blood_pressure', 'blood_sugar', 'ck-mb', 'troponin']

X = df[features]

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Optional: Convert back to DataFrame for inspection
X_scaled_df = pd.DataFrame(X_scaled, columns=features)

# Preview
X_scaled_df.head()

# Elbow Method to find optimal number of clusters
wcss = []
range_n = range(2, 11)  # from 2 to 10 clusters

for k in range_n:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Plot Elbow curve
plt.figure(figsize=(8, 5))
plt.plot(range_n, wcss, marker='o')
plt.title('Elbow Method For Optimal k')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS (Inertia)')
plt.grid(True)
plt.show()

# Check silhouette scores to confirm optimal k
for k in range(2, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    labels = kmeans.fit_predict(X_scaled)
    score = silhouette_score(X_scaled, labels)
    print(f'Silhouette Score for {k} clusters: {score:.4f}')

# Final KMeans with 2 clusters
kmeans_final = KMeans(n_clusters=2, random_state=42)
df['cluster'] = kmeans_final.fit_predict(X_scaled)

# View how many patients are in each cluster
print(df['cluster'].value_counts())

# Compare clusters by feature means
cluster_profile = df.groupby('cluster')[features + ['result']].mean()
print(cluster_profile)

# Reduce dimensions to 2D for visualization
pca = PCA(n_components=2)
reduced_data = pca.fit_transform(X_scaled)

# Plot the clusters
plt.figure(figsize=(8, 6))
plt.scatter(reduced_data[:, 0], reduced_data[:, 1], c=df['cluster'], cmap='viridis', alpha=0.7)
plt.title('PCA Visualization of Clusters')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.grid(True)
plt.show()

print(cluster_profile)

recommendations = {
      0: "Monitor lifestyle, blood pressure, and sugar. Schedule periodic tests like ECG and blood panels. Moderate heart attack risk — early lifestyle changes are critical.",
      1: "Urgent cardiology referral needed. High CK-MB and glucose levels suggest active cardiac injury. Recommend troponin tests, ECG, and possible angiography. High priority cases."
}

# Map recommendations to each patient
df['recommendation'] = df['cluster'].map(recommendations)

# Show sample
df[['cluster', 'result', 'recommendation']].head()

!pip install gradio

import numpy as np

def cluster_and_recommend(age, gender, heart_rate, sbp, dbp, sugar, ckmb, troponin):
    input_data = np.array([[age, gender, heart_rate, sbp, dbp, sugar, ckmb, troponin]])
    scaled_input = scaler.transform(input_data)
    cluster = kmeans.predict(scaled_input)[0]

    recommendations = {
    0: "Moderate risk. Monitor lifestyle and schedule periodic check-ups.",
    1: "High risk! Immediate cardiology referral and diagnostic testing recommended."
    }

    return f"Cluster: {cluster}", f"Recommendation: {recommendations[cluster]}"

import gradio as gr

interface = gr.Interface(
    fn=cluster_and_recommend,
        inputs=[
        gr.Number(label="Age"),
        gr.Radio(choices=[0, 1], label="Gender (0: Female, 1: Male)"),
        gr.Number(label="Heart Rate"),
        gr.Number(label="Systolic BP"),
        gr.Number(label="Diastolic BP"),
…        )

interface.launch()
















